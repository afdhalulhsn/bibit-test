---
swagger: '2.0'
info:
  title: IMDB API SERVICE
  version: '1.0'
  contact:
    name: Afdhalul IHsan
    email: afdhalulhsn74@gmail.com
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  "/v1/detail/{ImdbId}":
    get:
      operationId: OmdbMovieService_GetDatilMovie
      responses:
        '200':
          description: A successful response.
          schema:
            "$ref": "#/definitions/protoResponseGetDetailMovie"
        '404':
          description: Returned when the resource does not exist.
          schema:
            type: string
            format: string
        default:
          description: An unexpected error response.
          schema:
            "$ref": "#/definitions/runtimeError"
      parameters:
        - name: ImdbId
          in: path
          required: true
          type: string
      tags:
        - OmdbMovieService
  "/v1/getlist":
    post:
      operationId: OmdbMovieService_GetListMovieOmdb
      responses:
        '200':
          description: A successful response.
          schema:
            "$ref": "#/definitions/protoResponseListFilm"
        '404':
          description: Returned when the resource does not exist.
          schema:
            type: string
            format: string
        default:
          description: An unexpected error response.
          schema:
            "$ref": "#/definitions/runtimeError"
      parameters:
        - name: body
          in: body
          required: true
          schema:
            "$ref": "#/definitions/protoGetListMovieRequest"
      tags:
        - OmdbMovieService
definitions:
  protoDataFilmList:
    type: object
    properties:
      Title:
        type: string
      Year:
        type: string
      ImdbId:
        type: string
      Type:
        type: string
      Poster:
        type: string
      Detail:
        "$ref": "#/definitions/protoResponseGetDetailMovie"
  protoGetListMovieRequest:
    type: object
    properties:
      Keyword:
        type: string
      Page:
        type: integer
        format: int32
  protoRatings:
    type: object
    properties:
      Source:
        type: string
      Value:
        type: string
  protoResponseGetDetailMovie:
    type: object
    properties:
      Title:
        type: string
      Year:
        type: string
      Rated:
        type: string
      Released:
        type: string
      Runtime:
        type: string
      Genre:
        type: string
      Director:
        type: string
      Writer:
        type: string
      Actors:
        type: string
      Plot:
        type: string
      Language:
        type: string
      Country:
        type: string
      Awards:
        type: string
      Poster:
        type: string
      Metascore:
        type: string
      imdbRating:
        type: string
      imdbVotes:
        type: string
      imdbID:
        type: string
      Type:
        type: string
      DVD:
        type: string
      BoxOffice:
        type: string
      Production:
        type: string
      Website:
        type: string
      Response:
        type: string
      Rating:
        type: array
        items:
          "$ref": "#/definitions/protoRatings"
  protoResponseListFilm:
    type: object
    properties:
      ListFilm:
        type: array
        items:
          "$ref": "#/definitions/protoDataFilmList"
      TotalResult:
        type: string
  protobufAny:
    type: object
    properties:
      type_url:
        type: string
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
      value:
        type: string
        format: byte
        description: Must be a valid serialized protocol buffer of the above specified
          type.
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".


      JSON
      ====
      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  runtimeError:
    type: object
    properties:
      error:
        type: string
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          "$ref": "#/definitions/protobufAny"
