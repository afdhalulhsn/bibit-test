// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: movie.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetListMovieRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword string `protobuf:"bytes,1,opt,name=Keyword,proto3" json:"Keyword,omitempty"`
	Page    int32  `protobuf:"varint,2,opt,name=Page,proto3" json:"Page,omitempty"`
}

func (x *GetListMovieRequest) Reset() {
	*x = GetListMovieRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListMovieRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListMovieRequest) ProtoMessage() {}

func (x *GetListMovieRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListMovieRequest.ProtoReflect.Descriptor instead.
func (*GetListMovieRequest) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{0}
}

func (x *GetListMovieRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *GetListMovieRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type DataFilmList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title  string                  `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Year   string                  `protobuf:"bytes,2,opt,name=Year,proto3" json:"Year,omitempty"`
	ImdbId string                  `protobuf:"bytes,3,opt,name=ImdbId,proto3" json:"ImdbId,omitempty"`
	Type   string                  `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Poster string                  `protobuf:"bytes,5,opt,name=Poster,proto3" json:"Poster,omitempty"`
	Detail *ResponseGetDetailMovie `protobuf:"bytes,6,opt,name=Detail,proto3" json:"Detail,omitempty"`
}

func (x *DataFilmList) Reset() {
	*x = DataFilmList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataFilmList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFilmList) ProtoMessage() {}

func (x *DataFilmList) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFilmList.ProtoReflect.Descriptor instead.
func (*DataFilmList) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{1}
}

func (x *DataFilmList) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DataFilmList) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *DataFilmList) GetImdbId() string {
	if x != nil {
		return x.ImdbId
	}
	return ""
}

func (x *DataFilmList) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DataFilmList) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

func (x *DataFilmList) GetDetail() *ResponseGetDetailMovie {
	if x != nil {
		return x.Detail
	}
	return nil
}

type ResponseListFilm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListFilm    []*DataFilmList `protobuf:"bytes,1,rep,name=ListFilm,proto3" json:"ListFilm,omitempty"`
	TotalResult string          `protobuf:"bytes,2,opt,name=TotalResult,proto3" json:"TotalResult,omitempty"`
}

func (x *ResponseListFilm) Reset() {
	*x = ResponseListFilm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseListFilm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseListFilm) ProtoMessage() {}

func (x *ResponseListFilm) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseListFilm.ProtoReflect.Descriptor instead.
func (*ResponseListFilm) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{2}
}

func (x *ResponseListFilm) GetListFilm() []*DataFilmList {
	if x != nil {
		return x.ListFilm
	}
	return nil
}

func (x *ResponseListFilm) GetTotalResult() string {
	if x != nil {
		return x.TotalResult
	}
	return ""
}

type GetDetailMovieRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImdbId string `protobuf:"bytes,1,opt,name=ImdbId,proto3" json:"ImdbId,omitempty"`
}

func (x *GetDetailMovieRequest) Reset() {
	*x = GetDetailMovieRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetailMovieRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailMovieRequest) ProtoMessage() {}

func (x *GetDetailMovieRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailMovieRequest.ProtoReflect.Descriptor instead.
func (*GetDetailMovieRequest) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{3}
}

func (x *GetDetailMovieRequest) GetImdbId() string {
	if x != nil {
		return x.ImdbId
	}
	return ""
}

type ResponseGetDetailMovie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      string     `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Year       string     `protobuf:"bytes,2,opt,name=Year,proto3" json:"Year,omitempty"`
	Rated      string     `protobuf:"bytes,3,opt,name=Rated,proto3" json:"Rated,omitempty"`
	Released   string     `protobuf:"bytes,4,opt,name=Released,proto3" json:"Released,omitempty"`
	Runtime    string     `protobuf:"bytes,5,opt,name=Runtime,proto3" json:"Runtime,omitempty"`
	Genre      string     `protobuf:"bytes,6,opt,name=Genre,proto3" json:"Genre,omitempty"`
	Director   string     `protobuf:"bytes,7,opt,name=Director,proto3" json:"Director,omitempty"`
	Writer     string     `protobuf:"bytes,8,opt,name=Writer,proto3" json:"Writer,omitempty"`
	Actors     string     `protobuf:"bytes,9,opt,name=Actors,proto3" json:"Actors,omitempty"`
	Plot       string     `protobuf:"bytes,10,opt,name=Plot,proto3" json:"Plot,omitempty"`
	Language   string     `protobuf:"bytes,11,opt,name=Language,proto3" json:"Language,omitempty"`
	Country    string     `protobuf:"bytes,12,opt,name=Country,proto3" json:"Country,omitempty"`
	Awards     string     `protobuf:"bytes,13,opt,name=Awards,proto3" json:"Awards,omitempty"`
	Poster     string     `protobuf:"bytes,14,opt,name=Poster,proto3" json:"Poster,omitempty"`
	Metascore  string     `protobuf:"bytes,15,opt,name=Metascore,proto3" json:"Metascore,omitempty"`
	ImdbRating string     `protobuf:"bytes,16,opt,name=imdbRating,proto3" json:"imdbRating,omitempty"`
	ImdbVotes  string     `protobuf:"bytes,17,opt,name=imdbVotes,proto3" json:"imdbVotes,omitempty"`
	ImdbID     string     `protobuf:"bytes,18,opt,name=imdbID,proto3" json:"imdbID,omitempty"`
	Type       string     `protobuf:"bytes,19,opt,name=Type,proto3" json:"Type,omitempty"`
	DVD        string     `protobuf:"bytes,20,opt,name=DVD,proto3" json:"DVD,omitempty"`
	BoxOffice  string     `protobuf:"bytes,21,opt,name=BoxOffice,proto3" json:"BoxOffice,omitempty"`
	Production string     `protobuf:"bytes,22,opt,name=Production,proto3" json:"Production,omitempty"`
	Website    string     `protobuf:"bytes,23,opt,name=Website,proto3" json:"Website,omitempty"`
	Response   string     `protobuf:"bytes,24,opt,name=Response,proto3" json:"Response,omitempty"`
	Rating     []*Ratings `protobuf:"bytes,25,rep,name=Rating,proto3" json:"Rating,omitempty"`
}

func (x *ResponseGetDetailMovie) Reset() {
	*x = ResponseGetDetailMovie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseGetDetailMovie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseGetDetailMovie) ProtoMessage() {}

func (x *ResponseGetDetailMovie) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseGetDetailMovie.ProtoReflect.Descriptor instead.
func (*ResponseGetDetailMovie) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{4}
}

func (x *ResponseGetDetailMovie) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetRated() string {
	if x != nil {
		return x.Rated
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetReleased() string {
	if x != nil {
		return x.Released
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetDirector() string {
	if x != nil {
		return x.Director
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetWriter() string {
	if x != nil {
		return x.Writer
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetActors() string {
	if x != nil {
		return x.Actors
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetPlot() string {
	if x != nil {
		return x.Plot
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetAwards() string {
	if x != nil {
		return x.Awards
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetMetascore() string {
	if x != nil {
		return x.Metascore
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetImdbRating() string {
	if x != nil {
		return x.ImdbRating
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetImdbVotes() string {
	if x != nil {
		return x.ImdbVotes
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetImdbID() string {
	if x != nil {
		return x.ImdbID
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetDVD() string {
	if x != nil {
		return x.DVD
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetBoxOffice() string {
	if x != nil {
		return x.BoxOffice
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetProduction() string {
	if x != nil {
		return x.Production
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *ResponseGetDetailMovie) GetRating() []*Ratings {
	if x != nil {
		return x.Rating
	}
	return nil
}

type Ratings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string `protobuf:"bytes,1,opt,name=Source,proto3" json:"Source,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *Ratings) Reset() {
	*x = Ratings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movie_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ratings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ratings) ProtoMessage() {}

func (x *Ratings) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ratings.ProtoReflect.Descriptor instead.
func (*Ratings) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{5}
}

func (x *Ratings) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Ratings) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_movie_proto protoreflect.FileDescriptor

var file_movie_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x43, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x69, 0x6c, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6d, 0x64, 0x62, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x49, 0x6d, 0x64, 0x62, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x65, 0x0a,
	0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x6d, 0x12, 0x2f, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x6d, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x69, 0x6c, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x2f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x49, 0x6d, 0x64, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49,
	0x6d, 0x64, 0x62, 0x49, 0x64, 0x22, 0xa0, 0x05, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x59, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6c, 0x6f, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6d, 0x64, 0x62, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x64, 0x62, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x64, 0x62, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x64, 0x62, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6d, 0x64, 0x62, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x6d, 0x64, 0x62, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x56,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x44, 0x56, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x42, 0x6f, 0x78, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x42, 0x6f, 0x78, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x57, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x37, 0x0a, 0x07, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x32, 0xde, 0x01, 0x0a, 0x10, 0x4f, 0x6d, 0x64, 0x62, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x4f, 0x6d, 0x64, 0x62, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x6d, 0x22,
	0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x69, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x69, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f, 0x7b, 0x49, 0x6d, 0x64, 0x62, 0x49,
	0x64, 0x7d, 0x42, 0xb5, 0x01, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x92, 0x41,
	0xa8, 0x01, 0x12, 0x42, 0x0a, 0x10, 0x49, 0x4d, 0x44, 0x42, 0x20, 0x41, 0x50, 0x49, 0x20, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x22, 0x29, 0x0a, 0x0e, 0x41, 0x66, 0x64, 0x68, 0x61, 0x6c,
	0x75, 0x6c, 0x20, 0x49, 0x48, 0x73, 0x61, 0x6e, 0x1a, 0x17, 0x61, 0x66, 0x64, 0x68, 0x61, 0x6c,
	0x75, 0x6c, 0x68, 0x73, 0x6e, 0x37, 0x34, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x3b, 0x0a,
	0x03, 0x34, 0x30, 0x34, 0x12, 0x34, 0x0a, 0x2a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x07, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_movie_proto_rawDescOnce sync.Once
	file_movie_proto_rawDescData = file_movie_proto_rawDesc
)

func file_movie_proto_rawDescGZIP() []byte {
	file_movie_proto_rawDescOnce.Do(func() {
		file_movie_proto_rawDescData = protoimpl.X.CompressGZIP(file_movie_proto_rawDescData)
	})
	return file_movie_proto_rawDescData
}

var file_movie_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_movie_proto_goTypes = []interface{}{
	(*GetListMovieRequest)(nil),    // 0: proto.GetListMovieRequest
	(*DataFilmList)(nil),           // 1: proto.DataFilmList
	(*ResponseListFilm)(nil),       // 2: proto.ResponseListFilm
	(*GetDetailMovieRequest)(nil),  // 3: proto.GetDetailMovieRequest
	(*ResponseGetDetailMovie)(nil), // 4: proto.ResponseGetDetailMovie
	(*Ratings)(nil),                // 5: proto.Ratings
}
var file_movie_proto_depIdxs = []int32{
	4, // 0: proto.DataFilmList.Detail:type_name -> proto.ResponseGetDetailMovie
	1, // 1: proto.ResponseListFilm.ListFilm:type_name -> proto.DataFilmList
	5, // 2: proto.ResponseGetDetailMovie.Rating:type_name -> proto.Ratings
	0, // 3: proto.OmdbMovieService.GetListMovieOmdb:input_type -> proto.GetListMovieRequest
	3, // 4: proto.OmdbMovieService.GetDatilMovie:input_type -> proto.GetDetailMovieRequest
	2, // 5: proto.OmdbMovieService.GetListMovieOmdb:output_type -> proto.ResponseListFilm
	4, // 6: proto.OmdbMovieService.GetDatilMovie:output_type -> proto.ResponseGetDetailMovie
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_movie_proto_init() }
func file_movie_proto_init() {
	if File_movie_proto != nil {
		return
	}
	file_annotations_proto_init()
	file_annotations_swagger_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_movie_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListMovieRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataFilmList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseListFilm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetailMovieRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseGetDetailMovie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movie_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ratings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_movie_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_movie_proto_goTypes,
		DependencyIndexes: file_movie_proto_depIdxs,
		MessageInfos:      file_movie_proto_msgTypes,
	}.Build()
	File_movie_proto = out.File
	file_movie_proto_rawDesc = nil
	file_movie_proto_goTypes = nil
	file_movie_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OmdbMovieServiceClient is the client API for OmdbMovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OmdbMovieServiceClient interface {
	GetListMovieOmdb(ctx context.Context, in *GetListMovieRequest, opts ...grpc.CallOption) (*ResponseListFilm, error)
	GetDatilMovie(ctx context.Context, in *GetDetailMovieRequest, opts ...grpc.CallOption) (*ResponseGetDetailMovie, error)
}

type omdbMovieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOmdbMovieServiceClient(cc grpc.ClientConnInterface) OmdbMovieServiceClient {
	return &omdbMovieServiceClient{cc}
}

func (c *omdbMovieServiceClient) GetListMovieOmdb(ctx context.Context, in *GetListMovieRequest, opts ...grpc.CallOption) (*ResponseListFilm, error) {
	out := new(ResponseListFilm)
	err := c.cc.Invoke(ctx, "/proto.OmdbMovieService/GetListMovieOmdb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omdbMovieServiceClient) GetDatilMovie(ctx context.Context, in *GetDetailMovieRequest, opts ...grpc.CallOption) (*ResponseGetDetailMovie, error) {
	out := new(ResponseGetDetailMovie)
	err := c.cc.Invoke(ctx, "/proto.OmdbMovieService/GetDatilMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OmdbMovieServiceServer is the server API for OmdbMovieService service.
type OmdbMovieServiceServer interface {
	GetListMovieOmdb(context.Context, *GetListMovieRequest) (*ResponseListFilm, error)
	GetDatilMovie(context.Context, *GetDetailMovieRequest) (*ResponseGetDetailMovie, error)
}

// UnimplementedOmdbMovieServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOmdbMovieServiceServer struct {
}

func (*UnimplementedOmdbMovieServiceServer) GetListMovieOmdb(context.Context, *GetListMovieRequest) (*ResponseListFilm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListMovieOmdb not implemented")
}
func (*UnimplementedOmdbMovieServiceServer) GetDatilMovie(context.Context, *GetDetailMovieRequest) (*ResponseGetDetailMovie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatilMovie not implemented")
}

func RegisterOmdbMovieServiceServer(s *grpc.Server, srv OmdbMovieServiceServer) {
	s.RegisterService(&_OmdbMovieService_serviceDesc, srv)
}

func _OmdbMovieService_GetListMovieOmdb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmdbMovieServiceServer).GetListMovieOmdb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OmdbMovieService/GetListMovieOmdb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmdbMovieServiceServer).GetListMovieOmdb(ctx, req.(*GetListMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmdbMovieService_GetDatilMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmdbMovieServiceServer).GetDatilMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OmdbMovieService/GetDatilMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmdbMovieServiceServer).GetDatilMovie(ctx, req.(*GetDetailMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OmdbMovieService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OmdbMovieService",
	HandlerType: (*OmdbMovieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetListMovieOmdb",
			Handler:    _OmdbMovieService_GetListMovieOmdb_Handler,
		},
		{
			MethodName: "GetDatilMovie",
			Handler:    _OmdbMovieService_GetDatilMovie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie.proto",
}
